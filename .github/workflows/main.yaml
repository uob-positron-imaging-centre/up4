# This is a basic workflow to help you get started with Actions

name: CI

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the main branch
  pull_request:
    branches: [ uPPPP ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

jobs:
  conda:
    name: conda
    runs-on: ${{matrix.os}}-latest
    strategy:
      fail-fast: false
      matrix:
        include:
          #- {os: macos, version: 1.12.0, channel: conda-forge, rust: stable}
          #- {os: windows, version: 1.12.0, channel: conda-forge, rust: stable}
          - {os: ubuntu, version: 1.12.1, channel: conda-forge, rust: stable}
    defaults:
      run:
        shell: bash -l {0}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2
        with: {submodules: true}
      - name: Install Rust (${{matrix.rust}})
        uses: actions-rs/toolchain@v1
        with: {toolchain: '${{matrix.rust}}', profile: minimal, override: true}
      - name: Install conda
        uses: conda-incubator/setup-miniconda@v2
        with: {auto-update-conda: false, activate-environment: testenv}
      - name: Install HDF5 (${{matrix.version}}${{matrix.mpi && '-' || ''}}${{matrix.mpi}})
        run: |
          [ "${{matrix.mpi}}" != "" ] && MPICC_PKG=${{matrix.mpi}}-mpicc
          conda install -y -c ${{matrix.channel}} 'hdf5=${{matrix.version}}=*${{matrix.mpi}}*' $MPICC_PKG
      - name: Build and test all crates
        run: |
          export HDF5_DIR="$CONDA_PREFIX"
          [ "${{matrix.mpi}}" != "" ] && FEATURES=mpio
          [ "${{runner.os}}" != "Windows" ] && export RUSTFLAGS="-C link-args=-Wl,-rpath,$CONDA_PREFIX/lib"
          [ "${{matrix.mpi}}" == "mpich" ] && [ "${{runner.os}}" == "Linux" ] && export MPICH_CC=$(which gcc)
          [ "${{matrix.mpi}}" == "openmpi" ] && [ "${{runner.os}}" == "Linux" ] && export OMPI_CC=$(which gcc)
          cargo check
      - name: Install Python requirements
        run: |
          pwd
          python3 -m pip install --upgrade pip
          python3 -m pip install -r requirements.txt
      - name: Install up4 on python
        run: |
          python3 -m pip install .
      - name: Run tests
        run:
          pytest tests/test_all.py


#test -vv --features="$FEATURES"




  tests_linux:
    strategy:
      fail-fast: false
      matrix:
        python-version: [3.9]
        os: [ubuntu-latest]
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}
      - name: Set up Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true
      - name: Test Rust
        run: cargo test --verbose
      - name: Install project
        run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install .
      - name: Run tests
        run: pytest -s  -l --tb=long tests/test.py

  tests_win:
    needs: tests_linux
    strategy:
      fail-fast: false
      matrix:
        python-version: [3.9]
        os: [windows-latest]
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}
      - name: Set up Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true
      - name: Test Rust
        run: cargo test --verbose
      - name: Install project
        run: |
        python3 -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install .
      - name: Run tests
        run: pytest -s  -l --tb=long tests/test.py