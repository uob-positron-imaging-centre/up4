*********
Tutorials
*********
The usual workflow in up4 consists of 4 steps: Converting, Generating grids, Analysis, and Plotting or short CGAP.
This tutorial will go through each element in CGAP and explain what it does and how to use it.


Converting data
---------------
up4 is build on the HDF5 data format. To use up4 we must first convert data to HDF5.
Up to this point there are two supported conversion functions: csv and vtk.


.. code-block:: python

    import up4
    up4.Converter.csv(
        'path/to/data.csv',     # Path to the csv file
        'output.hdf5',          # filename to write
        columns = [0,1,2,3],    # Select the columns for to read, pointing to the time, x-, y-, z-positions
        delimiter = ',',        # Delimiter used in the csv file
        header = True,          # Does the csv file have a header?
        comment = '#',          # Comment character
        vel = True,             # Do you want to calculate the velocity
        interpolate = True,     # Do you want to interpolate the data
        radius = 0.1,           # Radius of the particle
    )

It is strongly recommended to interpolate the data. Up4 sometimes relies on the spacing between the data points to be constant.
If the csv contains velocity information you can read it in by simply extending the columns vector from 4 to 7 elements, pointing to t, x, y, z, vx, vy, vz.


The vtk reader is developed to read .vtk files generated by `LIGGGHTS <https://www.cfdem.com/liggghts-open-source-discrete-element-method-particle-simulation-code>`_ simulation software.
There are two ways to convert vtk files, either with :code:`up4.Converter.vtk`, which requires a list of filenames as input, or with :code:`up4.Converter.vtk_from_folder`
which will read all vtk files in a folder and convert them to hdf5.

The list of filenames in :code:`up4.Converter.vtk` must be sorted and without any sub-files generated by LIGGGHTS and can be generated with the following code:

.. code-block:: python

    from glob import glob
    from natsort import natsorted
    files = glob('path/to/folder/*.vtk')
    files = [f for f in files if not "boundingBox" in f]
    files = natsorted(files)

conversion can then be done with:

.. code-block:: python

    import up4
    up4.Converter.vtk(
        files,                 # Sorted list of filenames
        1e-5,                  # timestep of the simulation
        'output.hdf5',         # filename to write
        r"(\\d+).vtk",         # regex to extract the timestep from the filename
    )

The regex filter used in :code:`up4.Converter.vtk` is used to extract the timestep from the filename. The regex must contain a group of numbers.
Read more about regex `here <https://docs.python.org/3/howto/regex.html>`_. The default regex filter should work in most cases.

The function :code:`up4.Converter.vtk_from_folder` is a wrapper around :code:`up4.Converter.vtk` and can be used as follows:

.. code-block:: python

    import up4
    up4.Converter.vtk_from_folder(
        'path/to/folder',       # Path to the folder containing the vtk files
        1e-5,                   # timestep of the simulation
        'output.hdf5',          # filename to write
        r"(\\d+).vtk",          # regex to extract the timestep from the filename
    )

Short notice on stats: Once you generated your hdf5 file you can read it in using the :code:`up4.Data` class.
If you include the class in a normal print function the output may look as following:

.. code-block:: python

    import up4
    data = up4.Data('output.hdf5')
    print(data)

    """
    Dimensions of the system:
         x -0.07-->0.06
         y 0.00-->0.13
         z -0.09-->0.01
    The max time of this set is : 2.00
    Number of Particles: 1
    Mean velocity of: 0.44 m/s
    Minimum velocity 0.03 m/s
    Maximum Velocity 0.74 m/s
    """


Generating grids
------------------

Grids are one of the main parts in up4. They determine where (spatially) and in which way we want to have a look at the data.
The grid is generated by the :code:`up4.Grid` class.

Two different grid species are supported:

#. Cartesian

#. Cylindrical

the simplest way to generate a grid is to use :code:`up4.Grid.cartesian_from_data` or :code:`up4.Grid.cylindrical_from_data`.
Those functions automatically apply the system boundaries of the data given as their own boundaries.

To use those functions we need to read in the data using the :code:`up4.Data` class.


.. code-block:: python

    import up4
    data = up4.Data("path/to/data.hdf5")
    grid_car = up4.Grid.cartesian_from_data(    data, cells =[20,20,20])
    grid_cyl = up4.Grid.cylindrical_from_data(  data, cells =[20,20,20])


Data analysis
----------------

Data analysis is done by methods of the :code:`up4.Data` class. The most important methods are:

- :code:`up4.Data.vectorfield`: Calculates the velocity vector field of the data
- :code:`up4.Data.velocityfield`: Calculates the magnitude velocity field of the data
- :code:`up4.Data.numberfield`: Calculates the number field of the data


.. code-block:: python

    import up4
    data = up4.Data("path/to/data.hdf5")
    grid_car = up4.Grid.cartesian_from_data(data, cells =[20,20,20])
    velocity_field = data.velocityfield(grid_car)


all functions can be called with any type of grid.
The velocity field in this example can also be calculated in cylindrical coordinates:

.. code-block:: python

    import up4
    data = up4.Data("path/to/data.hdf5")
    grid_cyl = up4.Grid.cylindrical_from_data(data, cells =[20,20,20])
    velocity_field = data.velocityfield(grid_cyl)

Plotting
--------

Plotting is done by one of the classes in :code:`up4.plotting`. These are:

- :code:`up4.plotting.VectorPlotter`: Calculates the velocity vector field of the data
- :code:`up4.plotting.ScalarPlotter`: Calculates the magnitude velocity field of the data
- :code:`up4.plotting.ComparisonPlotter`: Calculates the number field of the data

If we reuse the example from above, plotting can be done by adding the following lines:

.. code-block:: python

    from up4.plotting import VectorPlotter, ScalarPlotter
    dpi = 600 # nice quality image saving
    axis = 1 # look along y-axis
    index = 4
    vector_field = data.vector_field(grid) # for vector plotting
    
    # plot vector field
    vec_field_plotter = VectorPlotter(vector_field)
    vec_field_plotter.unit_vector_plot(vector_field)
    vec_fig = vec_field_plotter.plot()

Which, if used on the `tests/fixtures/drum.hdf5` file, looks a little like this:

.. image:: ../_static/unitv.png



