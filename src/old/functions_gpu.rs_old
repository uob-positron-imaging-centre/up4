extern crate numpy;
extern crate ndarray;
extern crate ndarray_linalg;
use ndarray::prelude::*;

#[macro_use]
extern crate em;
use em::*;


pub fn granular_temperature_gpu( filename: &str) -> Array1<f32> {
    /*
    function to calculate the granular temperature of a system for a amount of timesteps

     */
    let file = hdf5::File::open(filename).expect("Error reading hdf5 file in rust");

    // loop over all timesteps
    let timesteps: u64 = timesteps(&file);
    let mut result: Array1<f32> = Array1::<f32>::zeros(timesteps as usize);
    for t in 0..timesteps {
        let name: String = "timestep ".to_string() + &t.to_string();
        let group = file.group(&name).unwrap();
        let velocity = group
            .dataset("velocity")
            .expect("error")
            .read_2d::<f32>()
            .unwrap();
        let particles = velocity.len() / 3;
        // loop over all particles in this timestep, calculate the velocity vector and add it to the
        // vectorfield array
        let (sum_vel,sum_vel_sq) = gran_temp_loop(particles,velocity)
        let temp = 1.0 / 3.0 * 1.0 / particles as f32
            * (sum_vel_sq - 1.0 / particles as f32 * sum_vel * sum_vel);

        result[t as usize] = temp;
    }
    //return
    result
}

#[gpu_use]
fn gran_temp_loop(particles: usize, velocity: Vec<f32>)->(f32,f32){
    let mut sum_vel:f32 = 0.0;
    let mut sum_vel_sq:f32 = 0.0;
    gpu_do!(load(sum_vel));
    gpu_do!(load(sum_vel_sq));
    gpu_do!(load(velocity));
    gpu_do!(launch());
    for particle in 0..particles as usize {
        let vel = velocity.slice(s![particle, ..]).to_owned();
        let abs_vel: f32 =
            (vel[0usize] * vel[0usize] + vel[1usize] * vel[1usize] + vel[2usize] * vel[2usize])
                .sqrt();
        sum_vel += abs_vel;
        sum_vel_sq += abs_vel * abs_vel;
    }
    gpu_do!(read(sum_vel));
    gpu_do!(read(sum_vel_sq));
    (sum_vel,sum_vel_sq)
}

fn timesteps(file: &hdf5::File) -> u64 {
    let mut timesteps: u64 = 0;
    let vec = file.member_names().unwrap();
    for x in file.member_names().unwrap() {
        if x.contains("timestep") {
            timesteps += 1;
        }
    }
    timesteps
}
